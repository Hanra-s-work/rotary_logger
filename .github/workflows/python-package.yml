#
# +==== BEGIN rotary_logger =================+
# LOGO:
# ..........####...####..........
# ......###.....#.#########......
# ....##........#.###########....
# ...#..........#.############...
# ...#..........#.#####.######...
# ..#.....##....#.###..#...####..
# .#.....#.##...#.##..##########.
# #.....##########....##...######
# #.....#...##..#.##..####.######
# .#...##....##.#.##..###..#####.
# ..#.##......#.#.####...######..
# ..#...........#.#############..
# ..#...........#.#############..
# ...##.........#.############...
# ......#.......#.#########......
# .......#......#.########.......
# .........#####...#####.........
# /STOP
# PROJECT: rotary_logger
# FILE: python-package.yml
# CREATION DATE: 29-10-2025
# LAST Modified: 5:56:14 29-10-2025
# DESCRIPTION:
# A module that provides a universal python light on iops way of logging to files your program execution.
# /STOP
# COPYRIGHT: (c) Asperguide
# PURPOSE: This is the workflow in charge of compiling the package as a python package but publish it on pypi instead of github packages
# // AR
# +==== END rotary_logger =================+
#
name: rotary_logger-pypi

# version: 1.0.8
# Version log:
# 1.0.0: Initial version
# 1.0.1: Add the xvfb library to the actions for any graphical environments
# 1.0.2: Put the tests in a container
# 1.0.3: Add python 3.13 to test with
# 1.0.4: Update the code structure of the workflow to stabilize the publishing process
# 1.0.5: Update the code to install the package before running the tests
# 1.0.6: Update the code to automatically install pytest in the docker container
# 1.0.7: Update the code to only update the version of the files based on the present ones.
# 1.0.8: Update the code to install the package before running the unit tests

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

env:
  CWD: "."
  SETUP_FILE: setup.py
  TOML_SETUP_FILE: pyproject.toml
  TAG_FILE: version.txt
  IS_RELEASE: is_release.txt
  MATRIX_VERSION_PUBLISHING: "3.10"
  SOURCE_CODE_PATH: rotary_logger/rotary_logger.py
  LATEST_TAG: ""

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          cd ${{env.CWD}}
          echo "Getting tags"
          git fetch --tags || echo "⚠️ git fetch --tags failed, continuing anyway" # Make sure to fetch the tags first
          echo "Updated the list"
          latest_tag=$(git tag --list "v*" | sort -rV | head -n 1)
          echo "Tag list: $(git tag -l)"
          echo "Latest tag = $latest_tag"
          if [ "$latest_tag" == "" ]; then
            echo "No tags found matching 'v*'."
            latest_tag="v1.0.0"
            echo "Using a default tag: $latest_tag"
          else
            echo "Latest Tag: $latest_tag"
          fi
          echo "$latest_tag" > ${{env.TAG_FILE}}
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "new_tag = $latest_tag"
          echo "env.new_tag = ${{env.TAG_FILE}}"
          echo "cat env.new_tag = $(cat ${{env.TAG_FILE}})"
          echo "env.LATEST_TAG = ${{env.LATEST_TAG}}"
          echo -e "\n\n\n\n\n\n\n\n\n"

      - name: Update module version in source code and builder file
        run: |
          cd ${{env.CWD}}
          latest_tag="$(cat ${{env.TAG_FILE}})"
          echo "Updating version in ${{env.SETUP_FILE}}"
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "Tag: $latest_tag"
          latest_tag=${latest_tag/"v"/""}
          echo "Tag: $latest_tag"
          if [ -f ${{env.SETUP_FILE}} ] ; then
            echo "Updating the version in ${{env.SETUP_FILE}}"
            sed -i "s/version='.*'/version='$latest_tag'/g" ${{env.SETUP_FILE}}
            sed -i "s/version = '.*'/version = '$latest_tag'/g" ${{env.SETUP_FILE}}
            echo "Content of file: $(cat ${{env.SETUP_FILE}})"
          fi
          if [ -f ${{env.TOML_SETUP_FILE}} ]; then
            echo "Updating the version in ${{env.TOML_SETUP_FILE}}"
            sed -i "s/version='.*'/version='$latest_tag'/g" ${{env.TOML_SETUP_FILE}}
            sed -i "s/version = '.*'/version = '$latest_tag'/g" ${{env.TOML_SETUP_FILE}}
            echo "Content of file: $(cat ${{env.TOML_SETUP_FILE}})"
          fi
          if [ -f ${{env.SOURCE_CODE_PATH}} ]; then
            echo "Updating the version in ${{env.SOURCE_CODE_PATH}}"
            sed -i "s/self.__version__ = '.*'/self.__version__ = '$latest_tag'/g" ${{env.SOURCE_CODE_PATH}}
            echo "Content of file: $(cat ${{env.SOURCE_CODE_PATH}})"
          fi
          echo "Content: $(ls)"
          echo -e "\n\n\n\n\n\n\n\n\n"

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Install dependencies
        run: |
          cd ${{env.CWD}}
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          lib_packages=$(find ./*/ -name "requirements.txt" -type f)
          first_requirement=$(echo $lib_packages | cut -d " " -f 1)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements; fi

      - name: Lint with flake8
        run: |
          cd ${{env.CWD}}
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: building the package
        run: |
          cd ${{env.CWD}}
          pip install build
          python -m build

      - name: Installing the package
        run: |
          cd ${{env.CWD}}
          PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
          echo -e "\n\n\n\n\n\n\n"
          echo "Package found: $PIP_PACKAGE"
          echo -e "\n\n\n\n\n\n\n"
          pip install "$PIP_PACKAGE"

      - name: Test with pytest
        run: |
          cd ${{env.CWD}}
          docker run -t -e DEBIAN_FRONTEND=noninteractive -v "$(pwd)":"/home" ubuntu /bin/bash -c "
            echo 'Updating ubuntu version' && \
            apt update && apt upgrade -y && \
            echo 'Installing required dependencies' && \
            apt install -y xvfb software-properties-common && \
            echo 'Adding python deadsnakes repository' && \
            add-apt-repository -y ppa:deadsnakes/ppa && \
            apt-get update && \
            echo 'Installing required python versions (${{matrix.python-version}})' && \
            apt install -y python${{matrix.python-version}} python${{matrix.python-version}}-venv python3-pip python${{matrix.python-version}}-dev && \
            echo 'Setting the installed python version as the default version' && \
            update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${{matrix.python-version}} 1 && \
            update-alternatives --install /usr/bin/python python /usr/bin/python${{matrix.python-version}} 1 && \
            echo 'Entering the folder containing the code' && \
            cd /home && \
            echo 'Installing requirements' && \
            pip3 install -r requirements.txt  --break-system-packages && \
            pip3 install pytest  --break-system-packages && \
            echo 'Running the tests' && \
            pytest -s
          "

      # Add the following steps if you want to publish to PyPI
      - name: Build and publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == env.MATRIX_VERSION_PUBLISHING
        run: |
          cd ${{env.CWD}}
          python -m build
          pip install twine
          twine upload dist/* --verbose
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
