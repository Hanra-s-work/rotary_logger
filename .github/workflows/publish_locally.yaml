#
# +==== BEGIN rotary_logger =================+
# LOGO:
# ..........####...####..........
# ......###.....#.#########......
# ....##........#.###########....
# ...#..........#.############...
# ...#..........#.#####.######...
# ..#.....##....#.###..#...####..
# .#.....#.##...#.##..##########.
# #.....##########....##...######
# #.....#...##..#.##..####.######
# .#...##....##.#.##..###..#####.
# ..#.##......#.#.####...######..
# ..#...........#.#############..
# ..#...........#.#############..
# ...##.........#.############...
# ......#.......#.#########......
# .......#......#.########.......
# .........#####...#####.........
# /STOP
# PROJECT: rotary_logger
# FILE: python-package.yml
# CREATION DATE: 29-10-2025
# LAST Modified: 6:38:39 01-11-2025
# DESCRIPTION:
# A module that provides a universal python light on iops way of logging to files your program execution.
# /STOP
# COPYRIGHT: (c) Asperguide
# PURPOSE: This is the workflow in charge of compiling the package as a python package but publish it as a release in the repository rather than on pypi
# // AR
# +==== END rotary_logger =================+
#
name: rotary_logger-gh-packages

# version: 1.0.8
# Version log:
# 1.0.0: Initial version
# 1.0.1: Add the xvfb library to the actions for any graphical environments
# 1.0.2: Put the tests in a container
# 1.0.3: Add python 3.13 to test with
# 1.0.4: Update the code structure of the workflow to stabilize the publishing process
# 1.0.5: Update the code to install the package before running the tests
# 1.0.6: Update the code to automatically install pytest in the docker container
# 1.0.7: Update the code to only update the version of the files based on the present ones.
# 1.0.8: Update the code to install the package before running the unit tests
# 1.0.9: Update code to use python slim containers instead of full fledged ubuntu containers.

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  id-token: write

env:
  CWD: "."
  SETUP_FILE: setup.py
  TOML_SETUP_FILE: pyproject.toml
  TAG_FILE: version.txt
  IS_RELEASE: is_release.txt
  MATRIX_VERSION_PUBLISHING: "3.10"
  SOURCE_CODE_PATH: rotary_logger/rotary_logger.py
  LATEST_TAG: ""

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          cd ${{env.CWD}}
          echo "Getting tags"
          git fetch --tags || echo "⚠️ git fetch --tags failed, continuing anyway" # Make sure to fetch the tags first
          echo "Updated the list"
          latest_tag=$(git tag --list "v*" | sort -rV | head -n 1)
          echo "Tag list: $(git tag -l)"
          echo "Latest tag = $latest_tag"
          if [ "$latest_tag" == "" ]; then
            echo "No tags found matching 'v*'."
            latest_tag="v1.0.0"
            echo "Using a default tag: $latest_tag"
          else
            echo "Latest Tag: $latest_tag"
          fi
          echo "$latest_tag" > ${{env.TAG_FILE}}
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "new_tag = $latest_tag"
          echo "env.new_tag = ${{env.TAG_FILE}}"
          echo "cat env.new_tag = $(cat ${{env.TAG_FILE}})"
          echo "env.LATEST_TAG = ${{env.LATEST_TAG}}"
          echo -e "\n\n\n\n\n\n\n\n\n"

      - name: Update module version in source code and builder file
        run: |
          cd ${{env.CWD}}
          latest_tag="$(cat ${{env.TAG_FILE}})"
          echo "Updating version in ${{env.SETUP_FILE}}"
          echo -e "\n\n\n\n\n\n\n\n\n"
          echo "Tag: $latest_tag"
          latest_tag=${latest_tag/"v"/""}
          echo "Tag: $latest_tag"
          if [ -f ${{env.SETUP_FILE}} ] ; then
            echo "Updating the version in ${{env.SETUP_FILE}}"
            sed -i "s/version='.*'/version='$latest_tag'/g" ${{env.SETUP_FILE}}
            sed -i "s/version = '.*'/version = '$latest_tag'/g" ${{env.SETUP_FILE}}
            echo "Content of file: $(cat ${{env.SETUP_FILE}})"
          fi
          if [ -f ${{env.TOML_SETUP_FILE}} ]; then
            echo "Updating the version in ${{env.TOML_SETUP_FILE}}"
            sed -i "s/version='.*'/version='$latest_tag'/g" ${{env.TOML_SETUP_FILE}}
            sed -i "s/version = '.*'/version = '$latest_tag'/g" ${{env.TOML_SETUP_FILE}}
            echo "Content of file: $(cat ${{env.TOML_SETUP_FILE}})"
          fi
          if [ -f ${{env.SOURCE_CODE_PATH}} ]; then
            echo "Updating the version in ${{env.SOURCE_CODE_PATH}}"
            sed -i "s/self.__version__ = '.*'/self.__version__ = '$latest_tag'/g" ${{env.SOURCE_CODE_PATH}}
            echo "Content of file: $(cat ${{env.SOURCE_CODE_PATH}})"
          fi
          echo "Content: $(ls)"
          echo -e "\n\n\n\n\n\n\n\n\n"

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Install dependencies
        run: |
          cd ${{env.CWD}}
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          lib_packages=$(find ./*/ -name "requirements.txt" -type f)
          first_requirement=$(echo $lib_packages | cut -d " " -f 1)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements; fi

      - name: Lint with flake8
        run: |
          cd ${{env.CWD}}
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: building the package
        run: |
          cd ${{env.CWD}}
          pip install build
          python -m build

      - name: Installing the package
        run: |
          cd ${{env.CWD}}
          PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
          echo -e "\n\n\n\n\n\n\n"
          echo "Package found: $PIP_PACKAGE"
          echo -e "\n\n\n\n\n\n\n"
          pip install "$PIP_PACKAGE"

      - name: Test with pytest
        run: |
          cd ${{env.CWD}}
          if [ -n "${SUDO_UID:-}" ]; then
              DOCKER_EXTRA_ARGS="--user ${SUDO_UID}:${SUDO_GID}"
              echo "Using DOCKER_EXTRA_ARGS='${DOCKER_EXTRA_ARGS}' to run container as the original user"
          fi
          DOCKER_IMAGE="python:${{matrix.python-version}}-slim"
          docker run --rm \
            -t \
            --name "python${{matrix.python-version}}_test" \
            -v "$(pwd)":/work \
            -w /work \
            ${DOCKER_EXTRA_ARGS:-} \
            "$DOCKER_IMAGE" \
            /bin/bash -c "set -euo pipefail \
                && python -V \
                && python -m venv .venv \
                && . .venv/bin/activate \
                && pip install --upgrade pip \
                && pip install -r requirements.txt \
                && pip install pytest \
                && pytest -s \
            "

      - name: Update author
        run: |
          cd ${{env.CWD}}
          git config --local user.name "${{secrets.USER_NAME_E}}"
          git config --local user.email "${{secrets.USER_EMAIL_E}}"

      - name: Update generated file
        id: update-generated
        if: matrix.python-version == env.MATRIX_VERSION_PUBLISHING
        run: |
          echo "Listing directory:"
          ls -a ${{env.CWD}}
          {
            echo 'UG<<EOF'
            ls ${{env.CWD}}/dist/*
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Get commit title
        id: commit-title
        if: matrix.python-version == env.MATRIX_VERSION_PUBLISHING
        run: |
          cd ${{env.CWD}}
          TAG_NAME="${{env.LATEST_TAG}}"
          echo "Found file=$TAG_NAME"
          COMMIT_TITLE="$(git tag -l --format='%(subject)' $TAG_NAME)"
          if [ "$COMMIT_TITLE" = "" ]
          then
            COMMIT_TITLE="$(git log --format=%s -n 1)"
          fi
          COMMIT_TITLE="$TAG_NAME - $COMMIT_TITLE"
          echo "Commit title: $COMMIT_TITLE"
          echo "COMMIT_TITLE=$COMMIT_TITLE" >> "$GITHUB_OUTPUT"

      - name: Get body message
        id: body-message
        if: matrix.python-version == env.MATRIX_VERSION_PUBLISHING
        run: |
          cd ${{env.CWD}}
          if [ "${{env.LATEST_TAG}}" = "" ]
          then
            echo "Tag name not found"
            TAG_NAME="v0.0.0"
          else
            TAG_NAME="${{env.LATEST_TAG}}"
          fi
          echo "TAG NAME content = $TAG_NAME"
          COMMIT_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME)
          echo "Commit message content = $COMMIT_MESSAGE"
          if [[ -n "$COMMIT_MESSAGE" ]]; then
            COMMIT_MESSAGE=$(git log --format=%s -n 1)
          fi
          if [ "$COMMIT_MESSAGE" = "" ]
          then
            COMMIT_MESSAGE="There is no message\n$(cat ./README.md)"
          else
            COMMIT_MESSAGE="${COMMIT_MESSAGE}\n$(cat ./README.md)"
          fi
          COMMIT_MESSAGE="${COMMIT_MESSAGE}\n\`\`\`log\n$(git log --format=%s -n 50)\n\`\`\`"
          echo "Commit message final content = '$COMMIT_MESSAGE'"
          # COMMIT_MESSAGE_ESCAPED=$(echo "$COMMIT_MESSAGE" | awk '{printf "%s\\n", $0}')
          # echo "COMMIT_MESSAGE=$COMMIT_MESSAGE_ESCAPED" >> $GITHUB_ENV
          {
            echo "COMMIT_MESSAGE<<EOH"
            echo -e "$COMMIT_MESSAGE"
            echo EOH
          } >> "$GITHUB_OUTPUT"

      - name: Publish binary as GitHub release
        uses: softprops/action-gh-release@v2
        if: matrix.python-version == env.MATRIX_VERSION_PUBLISHING && startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.update-generated.outputs.UG }}
          name: ${{ steps.commit-title.outputs.COMMIT_TITLE }}
          body: ${{ steps.body-message.outputs.COMMIT_MESSAGE }}
          draft: false
          prerelease: false
          make_latest: true
          token: ${{ secrets.GITHUB_TOKEN }}
