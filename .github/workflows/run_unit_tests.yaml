#
# +==== BEGIN rotary_logger =================+
# LOGO:
# ..........####...####..........
# ......###.....#.#########......
# ....##........#.###########....
# ...#..........#.############...
# ...#..........#.#####.######...
# ..#.....##....#.###..#...####..
# .#.....#.##...#.##..##########.
# #.....##########....##...######
# #.....#...##..#.##..####.######
# .#...##....##.#.##..###..#####.
# ..#.##......#.#.####...######..
# ..#...........#.#############..
# ..#...........#.#############..
# ...##.........#.############...
# ......#.......#.#########......
# .......#......#.########.......
# .........#####...#####.........
# /STOP
# PROJECT: rotary_logger
# FILE: run_unit_tests.yaml
# CREATION DATE: 01-11-2025
# LAST Modified: 6:37:11 01-11-2025
# DESCRIPTION:
# A module that provides a universal python light on iops way of logging to files your program execution.
# /STOP
# COPYRIGHT: (c) Asperguide
# PURPOSE: This github actions used for running tests everytime there is a push on the repository.
# // AR
# +==== END rotary_logger =================+
#
name: run_unit_tests

# version: 1.0.6
# Version log:
# 1.0.0: Initial version
# 1.0.1: Add the xvfb library to the actions for any graphical environments
# 1.0.2: Put the test in a docker container
# 1.0.3: Add the python 3.13 to the test suite
# 1.0.4: Update code structure of the workflow to stabilize the publishing process
# 1.0.5: Update code to install the package before running the tests
# 1.0.6: Update code to automatically install pytest in the docker container
# 1.0.7: Update code to use python slim containers instead of full fledged ubuntu containers.

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CWD: "."
  MATRIX_VERSION_PUBLISHING: "3.10"

jobs:
  increment-the-tag:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install xvfb
        run: sudo apt-get install xvfb

      - name: Install dependencies
        run: |
          cd ${{env.CWD}}
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          lib_packages=$(find ./*/ -name "requirements.txt" -type f)
          first_requirement=$(echo $lib_packages | cut -d " " -f 1)
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements; fi

      - name: Lint with flake8
        run: |
          cd ${{env.CWD}}
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: building the package
        run: |
          cd ${{env.CWD}}
          pip install build
          python -m build

      - name: Installing the package
        run: |
          cd ${{env.CWD}}
          PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
          echo -e "\n\n\n\n\n\n\n"
          echo "Package found: $PIP_PACKAGE"
          echo -e "\n\n\n\n\n\n\n"
          pip install "$PIP_PACKAGE"

      - name: Test with pytest
        run: |
          cd ${{env.CWD}}
          # Determine a host UID:GID to run the container with so files created by
          # the container are owned by the same user as on the runner. Prefer
          # SUDO_UID/SUDO_GID when present (e.g. when actions run with sudo),
          # otherwise fall back to the current user id from `id -u`/`id -g`.
          HOST_UID=${SUDO_UID:-$(id -u)}
          HOST_GID=${SUDO_GID:-$(id -g)}
          DOCKER_EXTRA_ARGS="--user ${HOST_UID}:${HOST_GID}"
          echo "Using DOCKER_EXTRA_ARGS='${DOCKER_EXTRA_ARGS}' to run container with host uid/gid"
          DOCKER_IMAGE="python:${{matrix.python-version}}-slim"
          docker run --rm \
            -t \
            --name "python${{matrix.python-version}}_test" \
            -v "$(pwd)":/work \
            -w /work \
            ${DOCKER_EXTRA_ARGS:-} \
            "$DOCKER_IMAGE" \
            /bin/bash -c "set -euo pipefail \
                && python -V \
                && python -m venv .venv \
                && . .venv/bin/activate \
                && pip install --upgrade pip \
                && pip install -r requirements.txt \
                && pip install pytest \
                && pytest -s \
            "
