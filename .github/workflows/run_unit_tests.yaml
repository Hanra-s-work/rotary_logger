name: run_unit_tests

# version: 1.0.6
# Version log:
  # 1.0.0: Initial version
  # 1.0.1: Add the xvfb library to the actions for any graphical environments
  # 1.0.2: Put the test in a docker container
  # 1.0.3: Add the python 3.13 to the test suite
  # 1.0.4: Update code structure of the workflow to stabilize the publishing process
  # 1.0.5: Update code to install the package before running the tests
  # 1.0.6: Update code to automatically install pytest in the docker container

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  CWD: "."
  MATRIX_VERSION_PUBLISHING: "3.10"

jobs:

  increment-the-tag:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install xvfb
      run: sudo apt-get install xvfb

    - name: Install dependencies
      run: |
        cd ${{env.CWD}}
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        lib_packages=$(find ./*/ -name "requirements.txt" -type f)
        first_requirement=$(echo $lib_packages | cut -d " " -f 1)
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ ${#first_requirements} -gt 0 ]; then pip install -r $first_requirements; fi

    - name: Lint with flake8
      run: |
        cd ${{env.CWD}}
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: building the package
      run: |
        cd ${{env.CWD}}
        pip install build
        python -m build

    - name: Installing the package
      run: |
        cd ${{env.CWD}}
        PIP_PACKAGE="$(find . -name "*.tar.gz" -type f | cut -d " " -f 1)"
        echo -e "\n\n\n\n\n\n\n"
        echo "Package found: $PIP_PACKAGE"
        echo -e "\n\n\n\n\n\n\n"
        pip install "$PIP_PACKAGE"

    - name: Test with pytest
      run: |
        cd ${{env.CWD}}
        docker run -t -e DEBIAN_FRONTEND=noninteractive -v "$(pwd)":"/home" ubuntu /bin/bash -c "
          echo 'Updating ubuntu version' && \
          apt update && apt upgrade -y && \
          echo 'Installing required dependencies' && \
          apt install -y xvfb software-properties-common && \
          echo 'Adding python deadsnakes repository' && \
          add-apt-repository -y ppa:deadsnakes/ppa && \
          apt-get update && \
          echo 'Installing required python versions (${{matrix.python-version}})' && \
          apt install -y python${{matrix.python-version}} python${{matrix.python-version}}-venv python3-pip python${{matrix.python-version}}-dev && \
          echo 'Setting the installed python version as the default version' && \
          update-alternatives --install /usr/bin/python3 python3 /usr/bin/python${{matrix.python-version}} 1 && \
          update-alternatives --install /usr/bin/python python /usr/bin/python${{matrix.python-version}} 1 && \
          echo 'Entering the folder containing the code' && \
          cd /home && \
          echo 'Installing requirements' && \
          pip3 install -r requirements.txt  --break-system-packages && \
          pip install pytest  --break-system-packages  && \
          echo 'Running the tests' && \
          pytest -s
        "
